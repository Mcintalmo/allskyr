{
    "collab_server" : "",
    "contents" : "update.events <- function(events.path = \"./events\", \n                          verbose = FALSE, \n                          save.file = \"./save-files/events.sav\"){\n  \n  event.files <- list.files(path = events.path, \n                            pattern = \"ev_[0-9]{8}_[0-9]{6}[A-Z]_[0-9]{2}\\\\.txt\", \n                            full.names = TRUE, recursive = TRUE)\n  \n  events <- lapply(event.files, function(event.file, verbose){\n    if(verbose){cat(\"\\tevent.file:\", event.file, \"...\")}\n      \n    event.name <- sub(\".*/\", event.file, replacement = \"\")\n    event.name <- sub(\"\\\\.txt\", event.name, replacement=\"\")\n      \n    meta <- read.delim(event.file, comment.char=\"\", header = FALSE, skip = 1, \n                       nrows = 14, as.is = TRUE)\n    meta <- sub(\"# *\", \"\", meta[[1]])\n    meta <- strsplit(meta, \" : \")\n    \n    data <- read.table(event.file, as.is = TRUE, \n                       col.names = c(\"fr\", \"time\", \"sum\", \"seq\", \"cx\", \"cy\", \n                                     \"th\", \"phi\", \"lsp\", \"mag\", \"flag\"))\n    \n    #if(data[(data$cx == data$cy),] == 0){\n    #  return\n    #}\n      \n    if(verbose){cat(\"X\\n\")}\n      \n    return(event(name = event.name,\n                 file = event.file,\n                 version = meta[[grep(\"version\", meta)]][2],\n                 num_fr = as.integer(meta[[grep(\"num_fr\", meta)]][2]),\n                 date =  strptime(meta[[grep(\"time\", meta)]][2], \"%Y%m%d %H:%M:%S\", \n                                  tz =strsplit(meta[[grep(\"time\", meta)]][2], \" \")[[1]][3]),\n                 unix = as.numeric(meta[[grep(\"unix\", meta)]][2]),\n                 ntp = meta[[grep(\"ntp\", meta)]][2],\n                 seq0 = as.integer(meta[[grep(\"seq\", meta)]][2]),\n                 mul = meta[[grep(\"mul\", meta)]][2],\n                 site = meta[[grep(\"site\", meta)]][2],\n                 latlon = as.numeric(strsplit(meta[[grep(\"latlon\", meta)]][2], \" \")[[1]]),\n                 text = meta[[grep(\"text\", meta)]][2],\n                 plate = meta[[grep(\"plate\", meta)]][2], \n                 geom = as.integer(strsplit(meta[[grep(\"geom\", meta)]][2], \" \")[[1]]),\n                 reject = as.logical(as.numeric(meta[[grep(\"reject\", meta)]][2])),\n                 fr  = data$fr,\n                 time = data$time,\n                 sum  = data$sum, \n                 seq  = data$seq, \n                 cx   = data$cx, \n                 cy   = data$cy, \n                 th  = data$th, \n                 phi  = data$phi, \n                 lsp  = data$lsp,\n                 mag  = data$mag, \n                 flag = as.logical(data$flag))\n    )}, verbose)\n  \n  save(events, list = \"events\", file = save.file, verbose = verbose)\n}\n\nload.events <- function(load.file = \"./save-files/events.sav\", verbose = FALSE){\n  load(load.file)\n  return(events)\n}\n\nupdate.showers <- function(shower.file = c(\"./showers/shower_calendar_2010.txt\", \n                                           \"./showers/shower_calendar_2011.txt\", \n                                           \"./showers/shower_calendar_2012.txt\", \n                                           \"./showers/shower_calendar_2013.txt\", \n                                           \"./showers/shower_calendar_2014.txt\",\n                                           \"./showers/shower_calendar_2015.txt\",\n                                           \"./showers/shower_calendar_2016.txt\"),\n                                save.file = \"./save-files/shower.sav\",\n                                year=NULL){\n  \n  shower.data <- lapply(shower.file, function(file, year){\n    if(is.null(year)){\n      year <- str_extract(file, \"(?<=\\\\_)[0-9]{4}\")\n    }\n    #raw.data <- readLines(file, encoding = \"UTF-8\")\n    raw.data <- readLines(file)\n    names <- str_match(raw.data, \".*(?= \\\\()\")\n    numbers <- str_match_all(raw.data, \"[0-9]{3}(?= [A-Z])\")\n    abbrevs <- str_match_all(raw.data, \"[A-Z]{3}(?=\\\\))\")\n    months <- str_match_all(raw.data, \"[A-Z][a-z]{2}(?= )\")\n    values <- str_extract_all(raw.data, \"\\\\+*\\\\-*[0-9]+\\\\.*[0-9]*\")\n    data <- sapply(1:length(raw.data), function(i, names, numbers, abbrevs, months, values, year){\n      month.number = c(\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\")\n      \n      if(nchar(values[[i]][[1]]) > 2){\n        values[[i]] <- values[[i]][-1]\n      }\n      \n      start.day <- values[[i]][[1]]\n      start.month <- month.number[months[[i]][[1]] == month.abb]\n      \n      end.day <- values[[i]][[2]]\n      end.month <- month.number[months[[i]][[2]] == month.abb]\n      \n      peak.day <- values[[i]][[3]]\n      peak.month <- month.number[months[[i]][[3]] == month.abb]\n      \n      if((as.numeric(end.month) < as.numeric(start.month)) && (i < 3)){\n        start.year <- as.character(as.numeric(year) - 1)\n        end.year <- year\n        if(as.numeric(peak.month) >= as.numeric(start.month)){\n          peak.year <- start.year\n        }\n        else{\n          peak.year <- end.year\n        }\n      }\n      else if(as.numeric(end.month) < as.numeric(start.month)){\n        start.year <- year\n        end.year <- as.character(as.numeric(year) + 1)\n        if(as.numeric(peak.month) < as.numeric(start.month)){\n          peak.year <- end.year\n        }\n        else{\n          peak.year <- start.year\n        }\n      }\n      else {\n        start.year <- year\n        end.year <- year\n        peak.year <- year\n      }\n      \n      start.date <- paste(start.year, start.month, start.day, sep = \"\")\n      end.date <- paste(end.year, end.month, end.day, sep = \"\")\n      peak.date <- paste(peak.year, peak.month, peak.day, sep = \"\")\n      \n      gamma <- as.numeric(values[[i]][[4]])\n      theo.ra <- as.numeric(values[[i]][[5]])\n      theo.dec <- as.numeric(values[[i]][[6]])\n      v <- as.numeric(values[[i]][[7]])\n      r <- as.numeric(values[[i]][[8]])\n  \n      if(length(values[[i]]) < 9){\n        zhr <- \"Var\"\n      }\n      else{\n        zhr <- values[[i]][[9]]\n      }\n      \n      return(c(names[[i]], numbers[[i]], abbrevs[[i]], start.date, end.date, peak.date, \n               gamma, theo.ra, theo.dec, v, r, zhr))\n      \n    }, names, numbers, abbrevs, months, values, year)\n  \n    data <- as.data.frame(t(data), stringsAsFactors = FALSE)\n    \n    names(data) <- c(\"name\", \"number\", \"abbrev\", \"start.date\", \"end.date\", \"peak.date\", \n                     \"gamma\", \"theo.ra\", \"theo.dec\", \"v\", \"r\", \"zhr\")\n    \n    return(data)\n  }, year)\n  \n  showers <- NULL\n  for(data.frame in shower.data){\n    showers <- rbind(showers, data.frame)\n  }\n  \n  save(showers, list = \"showers\", file = save.file)\n}\n\nload.showers <- function(file = \"./save-files/shower.sav\"){\n  load(file)\n  return(showers)\n}",
    "created" : 1512077066970.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4277451457",
    "id" : "567E9764",
    "lastKnownWriteTime" : 1512490134,
    "last_content_update" : 1512490134071,
    "path" : "E:/Alex/Documents/GitHub/allskyr/import.R",
    "project_path" : "import.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}