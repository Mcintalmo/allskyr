sep=""))
}, showers)
update.radiants()
update.radiants()
shower
if(verbose) print(paste(shower$abbrev, substr(shower$start.date, 1, 4),
sep=""))
shower.events <- find.events(shower$start.date, shower$end.date, events)
radiant <- shower.radiant(shower.events)
write.table(radiant, file=paste(radiant.path, shower$abbrev,
substr(shower$start.date, 1, 4), ".txt",
sep=""))
if(verbose) print(paste(shower$abbrev, substr(shower$start.date, 1, 4),
sep=""))
shower.events <- find.events(shower$start.date, shower$end.date, events)
radiant <- shower.radiant(shower.events)
radiant <- shower.radiant(shower.events)
source('E:/Alex/Documents/GitHub/allskyr/radiant.R')
source('E:/Alex/Documents/GitHub/allskyr/radiant.R')
source('E:/Alex/Documents/GitHub/allskyr/radiant.R')
radiant1 <- shower.radiant(shower.events)
radiant <- shower.radiant(shower.events)
write.table(radiant, file=paste(radiant.path, shower$abbrev,
substr(shower$start.date, 1, 4), ".txt",
sep=""))
print(paste(shower$abbrev, substr(shower$start.date, 1, 4),
sep=""))
shower.events <- find.events(shower$start.date, shower$end.date, events)
radiant <- shower.radiant(shower.events)
shower.events <- find.events(shower$start.date, shower$end.date, events)
radiant <- shower.radiant(shower.events)
source('E:/Alex/Documents/GitHub/allskyr/radiant.R')
radiant <- shower.radiant(shower.events)
source('E:/Alex/Documents/GitHub/allskyr/radiant.R')
source('E:/Alex/Documents/GitHub/allskyr/import.R')
shower.events <- find.events(shower$start.date, shower$end.date, events)
rad <- shower.radiant(shower.events)
write.table(rad, file=paste(radiant.path, shower$abbrev,
substr(shower$start.date, 1, 4), ".txt",
sep=""))
radiants <- mapply(function(shower){
if(verbose) print(paste(shower$abbrev, substr(shower$start.date, 1, 4),
sep=""))
shower.events <- find.events(shower$start.date, shower$end.date, events)
rad <- shower.radiant(shower.events)
write.table(rad, file=paste(radiant.path, shower$abbrev,
substr(shower$start.date, 1, 4), ".txt",
sep=""))
}, showers)
verbose<-TRUE
radiants <- mapply(function(shower){
if(verbose) print(paste(shower$abbrev, substr(shower$start.date, 1, 4),
sep=""))
shower.events <- find.events(shower$start.date, shower$end.date, events)
rad <- shower.radiant(shower.events)
write.table(rad, file=paste(radiant.path, shower$abbrev,
substr(shower$start.date, 1, 4), ".txt",
sep=""))
}, showers)
radiants <- mapply(function(shower){
if(verbose) print(paste(shower$abbrev, substr(shower$start.date, 1, 4),
sep=""))
shower.events <- find.events(shower$start.date, shower$end.date, events)
rad <- shower.radiant(shower.events)
write.table(rad, file=paste(radiant.path, shower$abbrev,
substr(shower$start.date, 1, 4), ".txt",
sep=""))
}, showers)
shower
shower$abbrev
events <- load.events()
showers <- load.showers()
showers <- split(showers, seq(nrow(showers)))
class(showers)
length(showers)
shower[1]
shower[[1]]
showers[1]
showers[2]
showers[2]$name
showers[[2]]
showers[[2]]$name
head(showers)
head(as.vector(showers))
head(showers)
showers <- split(showers, seq(nrow(showers)))
source('E:/Alex/Documents/GitHub/allskyr/import.R')
showers <- load.showers()
showers <- split(showers)
showers <- split(showers, seq(nrow(showers)))
source('E:/Alex/Documents/GitHub/allskyr/import.R')
events <- load.events()
showers <- load.showers()
showers <- split(showers, seq(nrow(showers)))
radiants <- lapply(showers, function(shower){
if(verbose) print(paste(shower$abbrev, substr(shower$start.date, 1, 4),
sep=""))
shower.events <- find.events(shower$start.date, shower$end.date, events)
rad <- shower.radiant(shower.events)
write.table(rad, file=paste(radiant.path, shower$abbrev,
substr(shower$start.date, 1, 4), ".txt",
sep=""))
})
source('E:/Alex/Documents/GitHub/allskyr/shower.R')
update.radiants()
source('E:/Alex/Documents/GitHub/allskyr/shower.R')
update.radiants()
source('E:/Alex/Documents/GitHub/allskyr/shower.R')
?file.exists
source('E:/Alex/Documents/GitHub/allskyr/import.R')
events <- load.events()
showers <- load.showers()
showers <- split(showers, seq(nrow(showers)))
showers$abbrev
showers
showers[1,]
showers[,1]
source('E:/Alex/Documents/GitHub/allskyr/import.R')
update.radiants()
shiny::runApp()
update.radiants()
update.radiants()
event12
event1
event2
event2$cx
event2@cx
event2@cx==0
event2
update.radiants()
update.radiants()
any(event@cx==0)
any(event1@cx==0)
any(event2@cx==0)
event2@cx==0
event2@cx==0 && event2@cy==0
event2@cx==0==event2@cy==0
(event2@cx==0)==(event2@cy==0)
event2@cx==0 + event2@cy==0
(event2@cx==0) + (event2@cy==0)
if(any(event2@cx==0) || any(event2@cy==0)) print("noice")
(any(event2@cx==0) || any(event2@cy==0))
?cat
source('E:/Alex/Documents/GitHub/allskyr/import.R')
update.events
update.events()
source('E:/Alex/Documents/GitHub/allskyr/import.R')
update.events()
update.radiants()
update.radiants()
event1
event2
source('E:/Alex/Documents/GitHub/allskyr/import.R')
source('E:/Alex/Documents/GitHub/allskyr/import.R')
update.radiants()
update.events()
update.radiants()
suu <- list(NULL, NULL, 1:2, matrix(1:4, 2))
suu
suu[!sapply(suu, is.null)]
source('E:/Alex/Documents/GitHub/allskyr/import.R')
update.events()
update.radiants()
source('E:/Alex/Documents/GitHub/allskyr/import.R')
?load.table
runApp()
runApp()
data$shower
file.exists(paste("./save-files/radiants/", data$shower$abbrev,
substr(data$shower$start.date, 1, 4), "txt", sep=""))
paste("./save-files/radiants/", data$shower$abbrev,
+                   substr(data$shower$start.date, 1, 4), "txt", sep="")
paste("./save-files/radiants", data$shower$abbrev)
paste("./save-files/radiants/", data$shower$abbrev, sep="")
paste("./save-files/radiants/", data$shower$abbrev, substr(data$shower$start.date, 1, 4), sep="")
file.exists(paste("./save-files/radiants/", data$shower$abbrev, substr(data$shower$start.date, 1, 4), sep=""))
file.exists(paste("./save-files/radiants/", data$shower$abbrev, substr(data$shower$start.date, 1, 4), "/txt", sep=""))
file.exists(paste("./save-files/radiants/", data$shower$abbrev, substr(data$shower$start.date, 1, 4), ".txt", sep=""))
runApp()
?read.table
source('E:/Alex/Documents/GitHub/allskyr/import.R')
source('E:/Alex/Documents/GitHub/allskyr/import.R')
runApp()
source('E:/Alex/Documents/GitHub/allskyr/radiant.R')
source('E:/Alex/Documents/GitHub/allskyr/shower.R')
source('E:/Alex/Documents/GitHub/allskyr/shower.R')
test <- 1:4
test
this <- 1:4
that <- 5:8
that
lapply(this, function(this + that))
lapply(this, function(return(this + that)))
lapply(this, function{return(this + that)})
lapply(this, function(this, that){return(this + that)})
?lapply
lapply(this, function(this, that){return(this + 4)})
dec <- c(45, 46, 47)
ra <- c(179, 180, 181)
x <- cos(dec * pi / 180) * cos(ra * pi / 180)
y <- cos(dec * pi / 180) * sin(ra * pi / 180)
z <- sin(dec * pi / 180)
x
y
z
c(x, y, z)
c(t(x), t(y), t(z))
list(x, y, z)
?sapply
?as.matrix
as.matrix(x, y, z)
x
y
z
as.matrix(c(x, y, z), ncol=3)
as.matrix(c(x, y, z))
c(x, y, z)
?vapply
source('E:/Alex/Documents/GitHub/allskyr/radiant.R')
source('E:/Alex/Documents/GitHub/allskyr/radiant.R')
source('E:/Alex/Documents/GitHub/allskyr/radiant.R')
source('E:/Alex/Documents/GitHub/allskyr/radiant.R')
library(astrolibR)
events <- load.events()
shower <- load.showers()
load.radiant(shower[1])
load.radiant(shower[[1]])
shower
showers <- load.showers()
head(showers)
showers[[1]]
showers[1]
showers[1,]
showers[1,]$start.date
load.radiant(shower[1,])
radiants <- load.radiant(shower[1,])
radiants[antirad >= 0]
names(radiant)
names(radiants)
radiants[ra]
radiants[ra,]
ra
radiants["antirad" >= 0]
radiants["antirad" > 0]
radiants[radiants$antirad >= 0]
radiants[radiants$antirad > 0]
radiants[radiants$antirad > 0,]
radiants[radiants$antirad >= 0,]
length(radiants[radiants$antirad >= 0,])
nrow(radiants[radiants$antirad >= 0,])
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
length(events)
events[1]
events[2]
events[length(events)]
library(astrolibR)
library(stringr)
library(gplots)
library(ggplot2)
library(shiny)
source("event.R")
source("import.R")
source("radiant.R")
source("shower.R")
source("outlier.R")
events <- load.events()
showers <- load.showers()
radiants <- load.radiant()
radiants <- load.radiant(showers[1])
showers[1]
showers[[1]]
showers
showers[1,]
load.radiant(showers[1,])
hist(load.radiant(showers[1,]))
?hist
hist(load.radiant(showers[1,])$ra)
hist(load.radiant(showers[1,])$dec)
hist(load.radiant(showers[2,])$ra)
hist(load.radiant(showers[2,])$dec)
hist(load.radiant(showers[130,])$ra)
hist(load.radiant(showers[130,])$dec)
runApp()
hist(load.radiant(showers[107,])$dec)
hist(load.radiant(showers[107,])$ra)
library(MASS)
fit <- fitdistr(load.radiant(showers[107,]$dec), densfun="normal")
fit <- fitdistr(load.radiant(showers[107,])$dec, densfun="normal")
fit
hist(load.radiant(showers[107,])$dec)
curve(dnorm(x, fit$estimate[1], fit$estimate[2]), col="red", lwd=2, add=R)
curve(dnorm(x, fit$estimate[1], fit$estimate[2]), col="red", lwd=2, add=T)
x
?dnorm
curve(dnorm(x, fit$estimate[1], fit$estimate[2]), col="red", add=T)
curve(dnorm(x, fit$estimate[1], fit$estimate[2]), col="red")
curve(dnorm(load.radiant(showers[107,])$dec, fit$estimate[1], fit$estimate[2]), col="red")
fit
hist(load.radiant(showers[107,])$dec)
?dnorm
?fitdistr
fit <- fitdistr(load.radiant(showers[107,])$dec, densfun="Poisson")
warnings()
fit
fit <- fitdistr(load.radiant(showers[107,])$dec, densfun="gamma")
hist(load.radiant(showers[107,])$ra)
hist(load.radiant(showers[107,])$ra+130)
hist((load.radiant(showers[107,])$ra+130)%%360)
x <- hist((load.radiant(showers[107,])$ra+130)%%360)
fit <- fitdistr(x, densfun="normal")
x
x <- (load.radiant(showers[107,])$ra+130)%%360
x
fit <- fitdistr(x, densfun="normal")
fit
curve(dnorm(x, fit$estimate[1], fit$estimate[2]), col="red", add=T)
x <- (load.radiant(showers[107,])$ra+137)%%360
fit <- fitdistr(x, densfun="normal")
fit
x <- (load.radiant(showers[107,])$ra+140)%%360
fit <- fitdistr(x, densfun="normal")
fit
hist(x)
curve(dnorm(x, fit$estimate[1], fit$estimate[2]), col="red", add=T)
fit$estimate[1]
fit$estimate[2]
?dnorm
plot(density(x))
x.poi<-rpois(n=200,lambda=2.5)
hist(x.poi,main="Poisson distribution")
x.poi<-rpois(n=200,lambda=2.5)
hist(x.poi,main="Poisson distribution")
curve(dnorm(x,m=10,sd=2),from=0,to=20,main="Normal distribution")
curve(dnorm(x,fit$estimate[1],fit$estimate[2]),from=0,to=20,main="Normal distribution")
curve(dnorm(x,fit$estimate[1],fit$estimate[2]).main="Normal distribution")
curve(dnorm(x,fit$estimate[1],fit$estimate[2]))
curve(dnorm(x,fit$estimate[1],fit$estimate[2]), from=0, to=360)
hist(x)
curve(dnorm(x, fit$estimate[1], fit$estimate[2]), col="red", add=T)
hist(x/6000)
curve(dnorm(x, fit$estimate[1], fit$estimate[2]), col="red", add=T)
x
x/6000
x
hist(x/)
hist(x)
curve(dnorm(x, fit$estimate[1], fit$estimate[2])*6000, col="red", add=T)
dnorm(x, fit$estimate[1], fit$estimate[2])
dnorm(x, fit$estimate[1], fit$estimate[2])*6000
curve(dnorm(x, fit$estimate[1], fit$estimate[2]), col="red", add=T)
curve(dnorm(x, fit$estimate[1], fit$estimate[2])*60000, col="red", add=T)
curve(dnorm(x, fit$estimate[1], fit$estimate[2])*360000, col="red", add=T)
curve(dnorm(x, fit$estimate[1], fit$estimate[2])*36000000, col="red", add=T)
curve(dnorm(x, fit$estimate[1], fit$estimate[2])*3600000, col="red", add=T)
hist(x)
curve(dnorm(x, fit$estimate[1], fit$estimate[2])*3600000, col="red", add=T)
fit
plot(density(x))
plot(ecdf(x))
qqplot(x)
qqnorm(x)
abline(0,1)
?qqplot
hist(x)
x
this <- hist(x)
this
fit <- fitdistr(x, densfun="normal")
fit
fit <- fitdistr(x-180, densfun="normal")
fit
x <- load.radiant(showers[107,])$ra
y <- load.radiant(showers[107,])$dec
plot(x)
?plot
plot(x, type=p)
plot(x, type="p")
plot(x, pch=".")
plot(y, pch=".")
fit <- fitdistr(x, densfun="normal")
fit
fit <- fitdistr(y, densfun="normal")
fit
hist(x)
hist(x[x < 100])
fit <- fitdistr(x[x<100], densfun="normal")
fit
fit <- fitdistr(x[x<80], densfun="normal")
fit
hist(y)
hist(y[y>30])
hist(y[y>30||y<80])
hist(y[y>30&&y<80])
hist(y[y>30&y<80])
fit <- fitdistr(y[y>30&y<80], densfun="normal")
fit
hist(x)
fit <- fitdistr(x, densfun="normal")
fit
hist(x[x<80])
fit <- fitdistr(x[x<80], densfun="normal")
fit
hist(x[x<120])
fit <- fitdistr(x[x<120], densfun="normal")
fit
hist(y)
1 <= 2
?sapply
ensure.package <- function(package)
{
package <- as.character(package)
if (!require(package, character.only=TRUE))
{
install.packages(pkgs = package, repos = "http://cran.r-project.org")
require(package, character.only=TRUE)
}
}
ensure.package("astrolibR")
ensure.package("astrolibR")
ensure.package("stringr")
ensure.package("gplots")
ensure.package("ggplot2")
ensure.package("shiny")
source("event.R")
source("import.R")
source("radiant.R")
source("shower.R")
source("outlier.R")
events <- load.events()
head(events)
events[1]
events[[1]]
n.events <- length(events)
n.events
events[-n.events]
head(events[-n.events])
length(events[-n.events])
ensure.package("astrolibR")
ensure.package("stringr")
ensure.package("gplots")
ensure.package("ggplot2")
ensure.package("shiny")
source("event.R")
source("import.R")
source("radiant.R")
source("shower.R")
source("outlier.R")
events2 <- update.events()
ensure.package("astrolibR")
ensure.package("stringr")
ensure.package("gplots")
ensure.package("ggplot2")
ensure.package("shiny")
source("event.R")
source("import.R")
source("radiant.R")
source("shower.R")
source("outlier.R")
ensure.package("astrolibR")
ensure.package("stringr")
ensure.package("gplots")
ensure.package("ggplot2")
ensure.package("shiny")
source("event.R")
source("import.R")
source("radiant.R")
source("shower.R")
source("outlier.R")
events2 <- update.events()
?lapply
ensure.package("astrolibR")
ensure.package("stringr")
ensure.package("gplots")
ensure.package("ggplot2")
ensure.package("shiny")
source("event.R")
source("import.R")
source("radiant.R")
source("shower.R")
source("outlier.R")
source("import.R")
events2 <- update.events()
?save
class(events[1])
class(events[[1]])
source("import.R")
showers <- update.showers()
length(showers)
showers
showers <- load.showers()
length(showers)
length(showers[1])
showers[2]
showers[,2]
length(showers[,2])
showers2 <- load.showers()
length(showers2[,2])
if(-1)
boolean(-1)
bool(-1)
if(-1) print(1)
if(1) print(1)
install.packages("installr")
library(installr)
updater()
updater()
updater()
